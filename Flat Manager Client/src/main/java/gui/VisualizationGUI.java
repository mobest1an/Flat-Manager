package gui;

import client.RequestSender;
import lab.Flat;
import resources.ResourceController;
import tools.Request;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashSet;

public class VisualizationGUI {

    private JPanel mainPanel;
    private JPanel visualizationPanel;
    private JPanel backButtonPanel;
    private JButton backButton;
    private JPanel userPanel;
    private JLabel userNameLabel;
    private JComboBox languageComboBox;
    private String[] languages = {"Russian", "Portuguese", "Albanian", "English (Canada)"};

    private RequestSender requestSender;
    private String login;
    private String password;
    private boolean isRegistered;
    private HashSet<String> userSet = new HashSet<>();
    private int nullX;
    private int nullY;

    private ResourceController resourceController;

    public VisualizationGUI(RequestSender requestSender, String login, String password, boolean isRegistered, ResourceController resourceController) {
        this.requestSender = requestSender;
        this.login = login;
        this.password = password;
        this.isRegistered = isRegistered;
        this.resourceController = resourceController;
        $$$setupUI$$$();
    }

    public void setUserName() {
        userNameLabel.setText(login);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setBackground(new Color(-13025985));
        mainPanel.setPreferredSize(new Dimension(700, 450));
        visualizationPanel.setBackground(new Color(-13025985));
        visualizationPanel.setPreferredSize(new Dimension(600, 280));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        mainPanel.add(visualizationPanel, gbc);
        visualizationPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16777216)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        backButtonPanel = new JPanel();
        backButtonPanel.setLayout(new GridBagLayout());
        backButtonPanel.setBackground(new Color(-13025985));
        backButtonPanel.setPreferredSize(new Dimension(600, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(20, 0, 0, 0);
        mainPanel.add(backButtonPanel, gbc);
        backButton.setActionCommand("");
        backButton.setAlignmentX(0.5f);
        backButton.setAlignmentY(0.5f);
        backButton.setAutoscrolls(false);
        backButton.setBackground(new Color(-13025985));
        backButton.setBorderPainted(true);
        backButton.setFocusPainted(false);
        Font backButtonFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 18, backButton.getFont());
        if (backButtonFont != null) backButton.setFont(backButtonFont);
        backButton.setForeground(new Color(-1));
        backButton.setHorizontalTextPosition(0);
        backButton.setPreferredSize(new Dimension(180, 30));
        backButton.setText("Назад");
        backButton.putClientProperty("hideActionText", Boolean.FALSE);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        backButtonPanel.add(backButton, gbc);
        userPanel = new JPanel();
        userPanel.setLayout(new GridBagLayout());
        userPanel.setAutoscrolls(false);
        userPanel.setBackground(new Color(-13025985));
        userPanel.setMinimumSize(new Dimension(537, 55));
        userPanel.setPreferredSize(new Dimension(600, 55));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(userPanel, gbc);
        userNameLabel = new JLabel();
        userNameLabel.setDoubleBuffered(false);
        userNameLabel.setEnabled(true);
        Font userNameLabelFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 24, userNameLabel.getFont());
        if (userNameLabelFont != null) userNameLabel.setFont(userNameLabelFont);
        userNameLabel.setForeground(new Color(-1));
        userNameLabel.setHorizontalAlignment(4);
        userNameLabel.setHorizontalTextPosition(0);
        userNameLabel.setMaximumSize(new Dimension(537, 28));
        userNameLabel.setMinimumSize(new Dimension(537, 55));
        userNameLabel.setPreferredSize(new Dimension(300, 55));
        userNameLabel.setRequestFocusEnabled(true);
        userNameLabel.setText("Name");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        userPanel.add(userNameLabel, gbc);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setBackground(new Color(-13025985));
        panel1.setPreferredSize(new Dimension(300, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        userPanel.add(panel1, gbc);
        languageComboBox.setBackground(new Color(-13025985));
        languageComboBox.setForeground(new Color(-1));
        languageComboBox.setOpaque(true);
        languageComboBox.setPreferredSize(new Dimension(150, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(0, 0, 0, 150);
        panel1.add(languageComboBox, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    public void drawMessages() {
        backButton.setText(resourceController.getMainResourceBundle().getString("Назад"));
    }

    private boolean isActive = true;

    private void disableThread() {
        isActive = false;
    }

    private void createUIComponents() {
        mainPanel = new JPanel();
        backButton = new JButton();
        languageComboBox = new JComboBox(languages);
        languageComboBox.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resourceController.setMainResourceBundleByIndex(languageComboBox.getSelectedIndex());
                drawMessages();
            }
        });
        languageComboBox.setSelectedIndex(resourceController.getSelectedLanguage());

        Request request = new Request("table", resourceController.getMainResourceBundle().getBaseBundleName());
        request.setLogin(login);
        request.setPassword(password);
        request.setRegistered(isRegistered);
        requestSender.sendRequest(request);

        final Flat[][] flatCollection = {requestSender.getAnswer().getFlatCollection()};

        for (Flat flat : flatCollection[0]) {
            userSet.add(flat.getUserName());
        }
        int userCount = userSet.toArray().length;
        int[] colors = new int[userCount];
        for (int i = 0; i < colors.length; i++) {
            colors[i] = (int) (Math.random() * 1000000000);
        }

        visualizationPanel = new VisualizationPanel() {

            Graphics2D graphics2D;

            Integer animationStage = 5;

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                graphics2D = (Graphics2D) g;

                nullX = visualizationPanel.getWidth() / 2;
                nullY = visualizationPanel.getHeight() / 2;

                graphics2D.setColor(Color.WHITE);
                graphics2D.drawLine(nullX, 0, nullX, visualizationPanel.getHeight());
                graphics2D.drawLine(0, nullY, visualizationPanel.getWidth(), nullY);
                for (int i = 0; i < visualizationPanel.getHeight(); i = i + 15) {
                    graphics2D.drawLine(nullX - 3, i, nullX + 3, i);
                }
                for (int i = 0; i < visualizationPanel.getWidth(); i = i + 15) {
                    graphics2D.drawLine(i, nullY - 3, i, nullY + 3);
                }

                for (int i = 0; i < userCount; i++) {
                    for (Flat flat : flatCollection[0]) {
                        if (flat.getUserName().equals(userSet.toArray()[i])) {
                            graphics2D.setColor(new Color(colors[i]));
                            graphics2D.fillRect(Integer.parseInt(flat.getCoordinates().split(";")[0].trim()) + nullX + animationStage,
                                    (int) Double.parseDouble(flat.getCoordinates().split(";")[1].trim()) + nullY + animationStage,
                                    (int) Math.sqrt(flat.getArea()) - animationStage * 2, (int) Math.sqrt(flat.getArea()) - animationStage * 2);
                        }
                    }
                }
            }

            @Override
            public void run() {
                try {
                    int i = 0;
                    do {
                        i++;
                        for (animationStage = 4; animationStage >= 0; animationStage--) {
                            mainPanel.repaint();
                            Thread.sleep(150);
                            mainPanel.remove(visualizationPanel);
                            mainPanel.add(visualizationPanel);
                        }
                    } while (i != 3);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                while (isActive) {
                    Request request = new Request("table", resourceController.getMainResourceBundle().getBaseBundleName());
                    request.setLogin(login);
                    request.setPassword(password);
                    request.setRegistered(isRegistered);
                    requestSender.sendRequest(request);
                    Flat[] newFlatCollection = requestSender.getAnswer().getFlatCollection();
                    if (newFlatCollection.length != flatCollection[0].length) {
                        flatCollection[0] = newFlatCollection;
                    }
                    mainPanel.repaint();
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    mainPanel.remove(visualizationPanel);
                    mainPanel.add(visualizationPanel);
                }
            }
        };

        visualizationPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                for (Flat flat : flatCollection[0]) {
                    checkClicked(e.getX(), e.getY(), flat);
                }
            }
        });

        backButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                disableThread();
                visualizationPanel.setVisible(false);
                backButtonPanel.setVisible(false);
                mainPanel.removeAll();
                MainGUI mainGUI = new MainGUI(requestSender, login, password, isRegistered, resourceController);
                mainGUI.drawMessages();
                mainGUI.setUserName();
                mainPanel.add(mainGUI.$$$getRootComponent$$$());
            }
        });
    }

    private void checkClicked(int mouseClickedX, int mouseClickedY, Flat flat) {
        int xFlatCoordinate = Integer.parseInt(flat.getCoordinates().split(";")[0].trim()) + nullX;
        int yFlatCoordinate = (int) Double.parseDouble(flat.getCoordinates().split(";")[1].trim()) + nullY;
        int weight = (int) Math.sqrt(flat.getArea());
        int height = (int) Math.sqrt(flat.getArea());
        mouseClickedX = mouseClickedX - weight / 2;
        mouseClickedY = mouseClickedY - weight / 2;
        if (mouseClickedX >= xFlatCoordinate - (weight / 2) && mouseClickedX <= xFlatCoordinate + (weight / 2) &&
                mouseClickedY >= yFlatCoordinate - (height / 2) && mouseClickedY <= yFlatCoordinate + (height / 2)) {
            disableThread();
            visualizationPanel.setVisible(false);
            backButtonPanel.setVisible(false);
            mainPanel.removeAll();
            ElementInfoGUI elementInfoGUI = new ElementInfoGUI(flat, requestSender, login, password, isRegistered, resourceController);
            mainPanel.add(elementInfoGUI.$$$getRootComponent$$$());
        }
    }
}
