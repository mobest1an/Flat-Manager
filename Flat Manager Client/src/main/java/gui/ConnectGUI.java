package gui;

import client.RequestSender;
import resources.ResourceController;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

public class ConnectGUI {

    private JPanel mainPanel;
    private JPanel portFieldPanel;
    private JTextField portField;
    private JLabel messageLabel;
    private JPanel messageLabelPanel;
    private JPanel userPanel;
    private JComboBox languageComboBox;
    private RequestSender requestSender;
    private JFrame frame = new JFrame("Flat Manager");
    private ResourceController resourceController;
    private String[] languages = {"Russian", "Portuguese", "Albanian", "English (Canada)"};

    public ConnectGUI(RequestSender requestSender, ResourceController resourceController) {
        this.requestSender = requestSender;
        this.resourceController = resourceController;
        $$$setupUI$$$();
    }

    public void createFrame() {
        frame.add(new ConnectGUI(new RequestSender(), resourceController).mainPanel);
        frame.setBounds(400, 200, 700, 450);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setBackground(new Color(-13025985));
        mainPanel.setPreferredSize(new Dimension(700, 450));
        messageLabelPanel = new JPanel();
        messageLabelPanel.setLayout(new GridBagLayout());
        messageLabelPanel.setBackground(new Color(-13025985));
        messageLabelPanel.setPreferredSize(new Dimension(600, 50));
        messageLabelPanel.setVisible(true);
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(messageLabelPanel, gbc);
        Font messageLabelFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 24, messageLabel.getFont());
        if (messageLabelFont != null) messageLabel.setFont(messageLabelFont);
        messageLabel.setForeground(new Color(-1));
        messageLabel.setHorizontalAlignment(0);
        messageLabel.setPreferredSize(new Dimension(600, 50));
        messageLabel.setText("Введите порт");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        messageLabelPanel.add(messageLabel, gbc);
        portFieldPanel = new JPanel();
        portFieldPanel.setLayout(new GridBagLayout());
        portFieldPanel.setBackground(new Color(-13025985));
        portFieldPanel.setPreferredSize(new Dimension(600, 50));
        portFieldPanel.setVisible(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(0, 0, 150, 0);
        mainPanel.add(portFieldPanel, gbc);
        portField.setBackground(new Color(-13025985));
        portField.setCaretColor(new Color(-1));
        portField.setDisabledTextColor(new Color(-1));
        portField.setForeground(new Color(-1));
        portField.setPreferredSize(new Dimension(180, 30));
        portField.setRequestFocusEnabled(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 0, 73);
        portFieldPanel.add(portField, gbc);
        final JLabel label1 = new JLabel();
        label1.setAutoscrolls(false);
        label1.setBackground(new Color(-4473925));
        Font label1Font = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 16, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-1));
        label1.setHorizontalAlignment(4);
        label1.setHorizontalTextPosition(0);
        label1.setPreferredSize(new Dimension(125, 20));
        label1.setText("PORT:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(0, 0, 0, 15);
        portFieldPanel.add(label1, gbc);
        userPanel = new JPanel();
        userPanel.setLayout(new GridBagLayout());
        userPanel.setAutoscrolls(false);
        userPanel.setBackground(new Color(-13025985));
        userPanel.setMinimumSize(new Dimension(537, 55));
        userPanel.setPreferredSize(new Dimension(600, 55));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(0, 0, 50, 0);
        mainPanel.add(userPanel, gbc);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setBackground(new Color(-13025985));
        panel1.setPreferredSize(new Dimension(300, 55));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(0, 0, 0, 300);
        userPanel.add(panel1, gbc);
        languageComboBox.setBackground(new Color(-13025985));
        languageComboBox.setForeground(new Color(-1));
        languageComboBox.setOpaque(true);
        languageComboBox.setPreferredSize(new Dimension(150, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(0, 0, 0, 150);
        panel1.add(languageComboBox, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private Timer timer;

    public void drawMessages() {
        messageLabel.setText(resourceController.getMainResourceBundle().getString("Введите порт"));
    }

    private void createUIComponents() {
        messageLabel = new JLabel();
        portField = new JTextField();
        languageComboBox = new JComboBox(languages);
        languageComboBox.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resourceController.setMainResourceBundleByIndex(languageComboBox.getSelectedIndex());
                drawMessages();
            }
        });
        languageComboBox.setSelectedIndex(resourceController.getSelectedLanguage());
        portField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    try {
                        if (requestSender.setConnection(Integer.parseInt(portField.getText()))) {
                            messageLabel.setText(resourceController.getMainResourceBundle().getString("Соединение с сервером установлено!"));
                            portFieldPanel.setVisible(false);
                            userPanel.setVisible(false);
                            timer = new Timer(1000, new AbstractAction() {
                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    messageLabel.setVisible(false);
                                    mainPanel.removeAll();
                                    EnterGUI enterGUI = new EnterGUI(requestSender, resourceController);
                                    enterGUI.drawMessages();
                                    mainPanel.add(enterGUI.$$$getRootComponent$$$());
                                    timer.stop();
                                }
                            });
                            timer.start();
                        } else {
                            messageLabel.setText(resourceController.getMainResourceBundle().getString("Ошибка соединения с сервером!"));
                            portField.setText("");
                        }
                    } catch (NumberFormatException nfe) {
                        messageLabel.setText(resourceController.getMainResourceBundle().getString("Неправильный формат!"));
                        portField.setText("");
                    }
                }
            }
        });
    }
}
