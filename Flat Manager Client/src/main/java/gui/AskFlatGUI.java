package gui;

import client.RequestSender;
import lab.*;
import resources.ResourceController;
import tools.Message;
import tools.Request;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.time.ZonedDateTime;

public class AskFlatGUI {

    private JPanel mainPanel;
    private JLabel messageLabel;
    private JPanel dialogPanel;
    private JButton backButton;
    private JTextField nameField;
    private JTextField areaField;
    private JTextField numberOfRoomsField;
    private JTextField xCoordinateField;
    private JTextField yCoordinateField;
    private JTextField furnishField;
    private JTextField viewField;
    private JTextField transportField;
    private JTextField houseNameField;
    private JTextField houseYearField;
    private JTextField houseNumberOfFlatsOnFloorField;
    private JButton sendButton;
    private JLabel nameLabel;
    private JLabel areaLabel;
    private JLabel numberOfRoomsLabel;
    private JLabel xCoordinateLabel;
    private JLabel yCoordinateLabel;
    private JLabel furnishLabel;
    private JLabel viewLabel;
    private JLabel transportLabel;
    private JLabel houseNameLabel;
    private JLabel houseYearLabel;
    private JLabel houseNumberOfFlatsOnFloorLabel;

    private RequestSender requestSender;
    private String login;
    private String password;
    private boolean isRegistered;

    private Integer id;
    private String name;
    private String coordinates;
    private ZonedDateTime creationDate;
    private Integer area;
    private Integer numberOfRooms;
    private Furnish furnish;
    private View view;
    private Transport transport;
    private String aboutHouse;
    private int key;
    private boolean isInsert;
    private int keyOrID;
    private int fromHere;
    private Flat flat;
    private ResourceController resourceController;

    public AskFlatGUI(RequestSender requestSender, String login, String password, boolean isRegistered, boolean isInsert, int keyOrID, int fromHere, ResourceController resourceController) {
        this.requestSender = requestSender;
        this.login = login;
        this.password = password;
        this.isRegistered = isRegistered;
        this.isInsert = isInsert;
        this.keyOrID = keyOrID;
        this.fromHere = fromHere;
        this.resourceController = resourceController;
    }

    public void setFlat(Flat flat) {
        this.flat = flat;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setBackground(new Color(-13025985));
        mainPanel.setPreferredSize(new Dimension(700, 450));
        dialogPanel = new JPanel();
        dialogPanel.setLayout(new GridBagLayout());
        dialogPanel.setBackground(new Color(-13025985));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(dialogPanel, gbc);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setBackground(new Color(-13025985));
        panel1.setPreferredSize(new Dimension(445, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        dialogPanel.add(panel1, gbc);
        messageLabel = new JLabel();
        Font messageLabelFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 20, messageLabel.getFont());
        if (messageLabelFont != null) messageLabel.setFont(messageLabelFont);
        messageLabel.setForeground(new Color(-1));
        messageLabel.setHorizontalAlignment(0);
        messageLabel.setHorizontalTextPosition(0);
        messageLabel.setPreferredSize(new Dimension(445, 30));
        messageLabel.setText("Введите данные о квартире:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel1.add(messageLabel, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        panel2.setBackground(new Color(-13025985));
        panel2.setPreferredSize(new Dimension(400, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        dialogPanel.add(panel2, gbc);
        nameLabel = new JLabel();
        Font nameLabelFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 14, nameLabel.getFont());
        if (nameLabelFont != null) nameLabel.setFont(nameLabelFont);
        nameLabel.setForeground(new Color(-1));
        nameLabel.setHorizontalAlignment(4);
        nameLabel.setPreferredSize(new Dimension(220, 30));
        nameLabel.setText("Имя:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel2.add(nameLabel, gbc);
        nameField = new JTextField();
        nameField.setBackground(new Color(-13025985));
        nameField.setCaretColor(new Color(-1));
        nameField.setDisabledTextColor(new Color(-1));
        nameField.setForeground(new Color(-1));
        nameField.setHorizontalAlignment(0);
        nameField.setPreferredSize(new Dimension(220, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel2.add(nameField, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        panel3.setBackground(new Color(-13025985));
        panel3.setPreferredSize(new Dimension(365, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        dialogPanel.add(panel3, gbc);
        areaLabel = new JLabel();
        Font areaLabelFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 14, areaLabel.getFont());
        if (areaLabelFont != null) areaLabel.setFont(areaLabelFont);
        areaLabel.setForeground(new Color(-1));
        areaLabel.setHorizontalAlignment(4);
        areaLabel.setHorizontalTextPosition(0);
        areaLabel.setPreferredSize(new Dimension(220, 30));
        areaLabel.setText("Площадь:");
        areaLabel.setVerticalAlignment(0);
        areaLabel.setVerticalTextPosition(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel3.add(areaLabel, gbc);
        areaField = new JTextField();
        areaField.setBackground(new Color(-13025985));
        areaField.setCaretColor(new Color(-1));
        areaField.setDisabledTextColor(new Color(-1));
        areaField.setForeground(new Color(-1));
        areaField.setHorizontalAlignment(0);
        areaField.setPreferredSize(new Dimension(220, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel3.add(areaField, gbc);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridBagLayout());
        panel4.setBackground(new Color(-13025985));
        panel4.setPreferredSize(new Dimension(365, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.BOTH;
        dialogPanel.add(panel4, gbc);
        numberOfRoomsLabel = new JLabel();
        Font numberOfRoomsLabelFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 14, numberOfRoomsLabel.getFont());
        if (numberOfRoomsLabelFont != null) numberOfRoomsLabel.setFont(numberOfRoomsLabelFont);
        numberOfRoomsLabel.setForeground(new Color(-1));
        numberOfRoomsLabel.setHorizontalAlignment(4);
        numberOfRoomsLabel.setPreferredSize(new Dimension(220, 30));
        numberOfRoomsLabel.setText("Количество комнат:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel4.add(numberOfRoomsLabel, gbc);
        numberOfRoomsField = new JTextField();
        numberOfRoomsField.setBackground(new Color(-13025985));
        numberOfRoomsField.setCaretColor(new Color(-1));
        numberOfRoomsField.setDisabledTextColor(new Color(-1));
        numberOfRoomsField.setForeground(new Color(-1));
        numberOfRoomsField.setHorizontalAlignment(0);
        numberOfRoomsField.setPreferredSize(new Dimension(220, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel4.add(numberOfRoomsField, gbc);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridBagLayout());
        panel5.setBackground(new Color(-13025985));
        panel5.setPreferredSize(new Dimension(365, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.BOTH;
        dialogPanel.add(panel5, gbc);
        xCoordinateLabel = new JLabel();
        Font xCoordinateLabelFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 14, xCoordinateLabel.getFont());
        if (xCoordinateLabelFont != null) xCoordinateLabel.setFont(xCoordinateLabelFont);
        xCoordinateLabel.setForeground(new Color(-1));
        xCoordinateLabel.setHorizontalAlignment(4);
        xCoordinateLabel.setPreferredSize(new Dimension(220, 30));
        xCoordinateLabel.setText("Координата X:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel5.add(xCoordinateLabel, gbc);
        xCoordinateField = new JTextField();
        xCoordinateField.setBackground(new Color(-13025985));
        xCoordinateField.setCaretColor(new Color(-1));
        xCoordinateField.setDisabledTextColor(new Color(-1));
        xCoordinateField.setForeground(new Color(-1));
        xCoordinateField.setHorizontalAlignment(0);
        xCoordinateField.setPreferredSize(new Dimension(220, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel5.add(xCoordinateField, gbc);
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridBagLayout());
        panel6.setBackground(new Color(-13025985));
        panel6.setPreferredSize(new Dimension(365, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.fill = GridBagConstraints.BOTH;
        dialogPanel.add(panel6, gbc);
        yCoordinateLabel = new JLabel();
        Font yCoordinateLabelFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 14, yCoordinateLabel.getFont());
        if (yCoordinateLabelFont != null) yCoordinateLabel.setFont(yCoordinateLabelFont);
        yCoordinateLabel.setForeground(new Color(-1));
        yCoordinateLabel.setHorizontalAlignment(4);
        yCoordinateLabel.setPreferredSize(new Dimension(220, 30));
        yCoordinateLabel.setText("Координата Y:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel6.add(yCoordinateLabel, gbc);
        yCoordinateField = new JTextField();
        yCoordinateField.setBackground(new Color(-13025985));
        yCoordinateField.setCaretColor(new Color(-1));
        yCoordinateField.setDisabledTextColor(new Color(-1));
        yCoordinateField.setForeground(new Color(-1));
        yCoordinateField.setHorizontalAlignment(0);
        yCoordinateField.setPreferredSize(new Dimension(220, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel6.add(yCoordinateField, gbc);
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new GridBagLayout());
        panel7.setBackground(new Color(-13025985));
        panel7.setPreferredSize(new Dimension(405, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.fill = GridBagConstraints.BOTH;
        dialogPanel.add(panel7, gbc);
        furnishLabel = new JLabel();
        Font furnishLabelFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 14, furnishLabel.getFont());
        if (furnishLabelFont != null) furnishLabel.setFont(furnishLabelFont);
        furnishLabel.setForeground(new Color(-1));
        furnishLabel.setHorizontalAlignment(4);
        furnishLabel.setPreferredSize(new Dimension(220, 30));
        furnishLabel.setText("Качество обстановки:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        panel7.add(furnishLabel, gbc);
        furnishField = new JTextField();
        furnishField.setBackground(new Color(-13025985));
        furnishField.setCaretColor(new Color(-1));
        furnishField.setDisabledTextColor(new Color(-1));
        furnishField.setForeground(new Color(-1));
        furnishField.setHorizontalAlignment(0);
        furnishField.setPreferredSize(new Dimension(220, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel7.add(furnishField, gbc);
        final JPanel panel8 = new JPanel();
        panel8.setLayout(new GridBagLayout());
        panel8.setBackground(new Color(-13025985));
        panel8.setPreferredSize(new Dimension(405, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 7;
        gbc.fill = GridBagConstraints.BOTH;
        dialogPanel.add(panel8, gbc);
        viewLabel = new JLabel();
        Font viewLabelFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 14, viewLabel.getFont());
        if (viewLabelFont != null) viewLabel.setFont(viewLabelFont);
        viewLabel.setForeground(new Color(-1));
        viewLabel.setHorizontalAlignment(4);
        viewLabel.setPreferredSize(new Dimension(220, 30));
        viewLabel.setText("Поле зрения:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        panel8.add(viewLabel, gbc);
        viewField = new JTextField();
        viewField.setBackground(new Color(-13025985));
        viewField.setCaretColor(new Color(-1));
        viewField.setDisabledTextColor(new Color(-1));
        viewField.setForeground(new Color(-1));
        viewField.setHorizontalAlignment(0);
        viewField.setPreferredSize(new Dimension(220, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel8.add(viewField, gbc);
        final JPanel panel9 = new JPanel();
        panel9.setLayout(new GridBagLayout());
        panel9.setBackground(new Color(-13025985));
        panel9.setPreferredSize(new Dimension(405, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 8;
        gbc.fill = GridBagConstraints.BOTH;
        dialogPanel.add(panel9, gbc);
        transportLabel = new JLabel();
        Font transportLabelFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 14, transportLabel.getFont());
        if (transportLabelFont != null) transportLabel.setFont(transportLabelFont);
        transportLabel.setForeground(new Color(-1));
        transportLabel.setHorizontalAlignment(4);
        transportLabel.setPreferredSize(new Dimension(220, 30));
        transportLabel.setText("Вид транспорта:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        panel9.add(transportLabel, gbc);
        transportField = new JTextField();
        transportField.setBackground(new Color(-13025985));
        transportField.setCaretColor(new Color(-1));
        transportField.setDisabledTextColor(new Color(-1));
        transportField.setForeground(new Color(-1));
        transportField.setHorizontalAlignment(0);
        transportField.setPreferredSize(new Dimension(220, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel9.add(transportField, gbc);
        final JPanel panel10 = new JPanel();
        panel10.setLayout(new GridBagLayout());
        panel10.setBackground(new Color(-13025985));
        panel10.setPreferredSize(new Dimension(405, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 9;
        gbc.fill = GridBagConstraints.BOTH;
        dialogPanel.add(panel10, gbc);
        houseNameLabel = new JLabel();
        Font houseNameLabelFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 14, houseNameLabel.getFont());
        if (houseNameLabelFont != null) houseNameLabel.setFont(houseNameLabelFont);
        houseNameLabel.setForeground(new Color(-1));
        houseNameLabel.setHorizontalAlignment(4);
        houseNameLabel.setPreferredSize(new Dimension(220, 30));
        houseNameLabel.setText("Имя дома:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        panel10.add(houseNameLabel, gbc);
        houseNameField = new JTextField();
        houseNameField.setBackground(new Color(-13025985));
        houseNameField.setCaretColor(new Color(-1));
        houseNameField.setDisabledTextColor(new Color(-1));
        houseNameField.setForeground(new Color(-1));
        houseNameField.setHorizontalAlignment(0);
        houseNameField.setPreferredSize(new Dimension(220, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel10.add(houseNameField, gbc);
        final JPanel panel11 = new JPanel();
        panel11.setLayout(new GridBagLayout());
        panel11.setBackground(new Color(-13025985));
        panel11.setPreferredSize(new Dimension(405, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 10;
        gbc.fill = GridBagConstraints.BOTH;
        dialogPanel.add(panel11, gbc);
        houseYearLabel = new JLabel();
        Font houseYearLabelFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 14, houseYearLabel.getFont());
        if (houseYearLabelFont != null) houseYearLabel.setFont(houseYearLabelFont);
        houseYearLabel.setForeground(new Color(-1));
        houseYearLabel.setHorizontalAlignment(4);
        houseYearLabel.setPreferredSize(new Dimension(220, 30));
        houseYearLabel.setText("Возраст дома:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        panel11.add(houseYearLabel, gbc);
        houseYearField = new JTextField();
        houseYearField.setBackground(new Color(-13025985));
        houseYearField.setCaretColor(new Color(-1));
        houseYearField.setDisabledTextColor(new Color(-1));
        houseYearField.setForeground(new Color(-1));
        houseYearField.setHorizontalAlignment(0);
        houseYearField.setPreferredSize(new Dimension(220, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel11.add(houseYearField, gbc);
        final JPanel panel12 = new JPanel();
        panel12.setLayout(new GridBagLayout());
        panel12.setBackground(new Color(-13025985));
        panel12.setPreferredSize(new Dimension(445, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 11;
        gbc.fill = GridBagConstraints.BOTH;
        dialogPanel.add(panel12, gbc);
        houseNumberOfFlatsOnFloorLabel = new JLabel();
        Font houseNumberOfFlatsOnFloorLabelFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 14, houseNumberOfFlatsOnFloorLabel.getFont());
        if (houseNumberOfFlatsOnFloorLabelFont != null)
            houseNumberOfFlatsOnFloorLabel.setFont(houseNumberOfFlatsOnFloorLabelFont);
        houseNumberOfFlatsOnFloorLabel.setForeground(new Color(-1));
        houseNumberOfFlatsOnFloorLabel.setHorizontalAlignment(4);
        houseNumberOfFlatsOnFloorLabel.setPreferredSize(new Dimension(220, 30));
        houseNumberOfFlatsOnFloorLabel.setText("Количество квартир на этаже:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        panel12.add(houseNumberOfFlatsOnFloorLabel, gbc);
        houseNumberOfFlatsOnFloorField = new JTextField();
        houseNumberOfFlatsOnFloorField.setBackground(new Color(-13025985));
        houseNumberOfFlatsOnFloorField.setCaretColor(new Color(-1));
        houseNumberOfFlatsOnFloorField.setDisabledTextColor(new Color(-1));
        houseNumberOfFlatsOnFloorField.setForeground(new Color(-1));
        houseNumberOfFlatsOnFloorField.setHorizontalAlignment(0);
        houseNumberOfFlatsOnFloorField.setPreferredSize(new Dimension(220, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel12.add(houseNumberOfFlatsOnFloorField, gbc);
        final JPanel panel13 = new JPanel();
        panel13.setLayout(new GridBagLayout());
        panel13.setBackground(new Color(-13025985));
        panel13.setPreferredSize(new Dimension(445, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 12;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10, 0, 0, 0);
        dialogPanel.add(panel13, gbc);
        backButton.setActionCommand("");
        backButton.setAlignmentX(0.5f);
        backButton.setAlignmentY(0.5f);
        backButton.setAutoscrolls(false);
        backButton.setBackground(new Color(-13025985));
        backButton.setBorderPainted(true);
        backButton.setFocusPainted(false);
        Font backButtonFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 18, backButton.getFont());
        if (backButtonFont != null) backButton.setFont(backButtonFont);
        backButton.setForeground(new Color(-1));
        backButton.setPreferredSize(new Dimension(180, 30));
        backButton.setText("Назад");
        backButton.putClientProperty("hideActionText", Boolean.FALSE);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel13.add(backButton, gbc);
        sendButton.setActionCommand("");
        sendButton.setAlignmentX(0.5f);
        sendButton.setAlignmentY(0.5f);
        sendButton.setAutoscrolls(false);
        sendButton.setBackground(new Color(-13025985));
        sendButton.setBorderPainted(true);
        sendButton.setFocusPainted(false);
        Font sendButtonFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 18, sendButton.getFont());
        if (sendButtonFont != null) sendButton.setFont(sendButtonFont);
        sendButton.setForeground(new Color(-1));
        sendButton.setPreferredSize(new Dimension(180, 30));
        sendButton.setText("Отправить");
        sendButton.putClientProperty("hideActionText", Boolean.FALSE);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 0, 5);
        panel13.add(sendButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    public void drawMessages() {
        messageLabel.setText(resourceController.getMainResourceBundle().getString("Введите данные о квартире:"));
        nameLabel.setText(resourceController.getMainResourceBundle().getString("Имя:"));
        areaLabel.setText(resourceController.getMainResourceBundle().getString("Площадь:"));
        numberOfRoomsLabel.setText(resourceController.getMainResourceBundle().getString("Количество комнат:"));
        xCoordinateLabel.setText(resourceController.getMainResourceBundle().getString("Координата X:"));
        yCoordinateLabel.setText(resourceController.getMainResourceBundle().getString("Координата Y:"));
        furnishLabel.setText(resourceController.getMainResourceBundle().getString("Качество обстановки:"));
        viewLabel.setText(resourceController.getMainResourceBundle().getString("Поле зрения:"));
        transportLabel.setText(resourceController.getMainResourceBundle().getString("Вид транспорта:"));
        houseNameLabel.setText(resourceController.getMainResourceBundle().getString("Имя дома:"));
        houseYearLabel.setText(resourceController.getMainResourceBundle().getString("Возраст дома:"));
        houseNumberOfFlatsOnFloorLabel.setText(resourceController.getMainResourceBundle().getString("Количество квартир на этаже:"));
    }

    private void createUIComponents() {
        backButton = new JButton();
        sendButton = new JButton();

        sendButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (nameField.getText().equals("") || areaField.getText().equals("") || numberOfRoomsField.getText().equals("") ||
                        xCoordinateField.getText().equals("") || yCoordinateField.getText().equals("") || furnishField.getText().equals("") ||
                        viewField.getText().equals("") || transportField.getText().equals("") || houseNameField.getText().equals("") ||
                        houseYearField.getText().equals("") || houseNumberOfFlatsOnFloorField.getText().equals("")) {
                    messageLabel.setText(resourceController.getMainResourceBundle().getString("Введите данные до конца!"));
                } else {
                    Flat flat = createFlat();
                    if (flat != null) {
                        String message;
                        Message answer = null;
                        if (isInsert) {
                            message = insert(keyOrID);
                        } else {
                            answer = update(keyOrID);
                            message = answer.getMessage();
                        }
                        dialogPanel.setVisible(false);
                        mainPanel.removeAll();
                        if (fromHere == 0) {
                            ConsoleCommandsGUI consoleCommandsGUI = new ConsoleCommandsGUI(requestSender, login, password, isRegistered, resourceController);
                            consoleCommandsGUI.drawMessages();
                            consoleCommandsGUI.setUserName();
                            consoleCommandsGUI.setMessage(message);
                            mainPanel.add(consoleCommandsGUI.$$$getRootComponent$$$());
                        } else if (fromHere == 1) {
                            TableGUI tableGUI = new TableGUI(requestSender, login, password, isRegistered, resourceController);
                            tableGUI.drawMessages();
                            tableGUI.setUserName();
                            mainPanel.add(tableGUI.$$$getRootComponent$$$());
                        } else {
                            ElementInfoGUI elementInfoGUI = new ElementInfoGUI(answer.getFlat(), requestSender, login, password, isRegistered, resourceController);
                            mainPanel.add(elementInfoGUI.$$$getRootComponent$$$());
                        }
                    }
                }
            }
        });

        backButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dialogPanel.setVisible(false);
                mainPanel.removeAll();
                if (fromHere == 0) {
                    ConsoleCommandsGUI consoleCommandsGUI = new ConsoleCommandsGUI(requestSender, login, password, isRegistered, resourceController);
                    consoleCommandsGUI.drawMessages();
                    consoleCommandsGUI.setUserName();
                    mainPanel.add(consoleCommandsGUI.$$$getRootComponent$$$());
                } else if (fromHere == 1) {
                    TableGUI tableGUI = new TableGUI(requestSender, login, password, isRegistered, resourceController);
                    tableGUI.drawMessages();
                    tableGUI.setUserName();
                    mainPanel.add(tableGUI.$$$getRootComponent$$$());
                } else {
                    ElementInfoGUI elementInfoGUI = new ElementInfoGUI(flat, requestSender, login, password, isRegistered, resourceController);
                    mainPanel.add(elementInfoGUI.$$$getRootComponent$$$());
                }
            }
        });
    }

    public String insert(int key) {
        this.key = key;
        Flat flat = createFlat();
        Request request = new Request("insert", flat, key, resourceController.getMainResourceBundle().getBaseBundleName());
        request.setLogin(login);
        request.setPassword(password);
        request.setRegistered(isRegistered);
        requestSender.sendRequest(request);
        return requestSender.getAnswer().getMessage();
    }

    public Message update(int id) {
        this.id = id;
        Flat flat = createFlat();
        Request request = new Request("update", flat, id, resourceController.getMainResourceBundle().getBaseBundleName());
        request.setLogin(login);
        request.setPassword(password);
        request.setRegistered(isRegistered);
        requestSender.sendRequest(request);
        return requestSender.getAnswer();
    }

    private Flat createFlat() {

        creationDate = ZonedDateTime.now();

        name = nameField.getText().trim();

        try {
            area = Integer.parseInt(areaField.getText().trim());
            if (area <= 0 || area >= 700) {
                messageLabel.setText(resourceController.getMainResourceBundle().getString("Неправильный формат площади!"));
                return null;
            }
        } catch (NumberFormatException e) {
            messageLabel.setText(resourceController.getMainResourceBundle().getString("Неправильный формат площади!"));
            return null;
        }

        try {
            numberOfRooms = Integer.parseInt(numberOfRoomsField.getText().trim());
            if (numberOfRooms <= 0) {
                messageLabel.setText(resourceController.getMainResourceBundle().getString("Неправильный формат количества комнат!"));
                return null;
            }
        } catch (NumberFormatException e) {
            messageLabel.setText(resourceController.getMainResourceBundle().getString("Неправильный формат количества комнат!"));
            return null;
        }

        Long x;

        try {
            x = Long.parseLong(xCoordinateField.getText().trim());
            if (x > 235) {
                messageLabel.setText(resourceController.getMainResourceBundle().getString("Неправильный формат координаты x!"));
                return null;
            }
        } catch (NumberFormatException e) {
            messageLabel.setText(resourceController.getMainResourceBundle().getString("Неправильный формат координаты x!"));
            return null;
        }

        double y;

        try {
            y = Double.parseDouble(yCoordinateField.getText().trim());
        } catch (NumberFormatException e) {
            messageLabel.setText(resourceController.getMainResourceBundle().getString("Неправильный формат координаты y!"));
            return null;
        }

        coordinates = x + "; " + y;

        try {
            furnish = Furnish.valueOf(furnishField.getText().trim().toUpperCase());
        } catch (IllegalArgumentException e) {
            messageLabel.setText(resourceController.getMainResourceBundle().getString("Неправильно задано качество обстановки!"));
            return null;
        }

        try {
            view = View.valueOf(viewField.getText().trim().toUpperCase());
        } catch (IllegalArgumentException e) {
            messageLabel.setText(resourceController.getMainResourceBundle().getString("Неправильно задано поле зрения!"));
            return null;
        }

        try {
            transport = Transport.valueOf(transportField.getText().trim().toUpperCase());
        } catch (IllegalArgumentException e) {
            messageLabel.setText(resourceController.getMainResourceBundle().getString("Неправильно задан вид транспорта!"));
            return null;
        }

        String houseName = houseNameField.getText().trim();

        int houseYear;

        try {
            houseYear = Integer.parseInt(houseYearField.getText().trim());
            if (houseYear < 0) {
                messageLabel.setText(resourceController.getMainResourceBundle().getString("Неправильный формат возраста дома!"));
                return null;
            }
        } catch (NumberFormatException e) {
            messageLabel.setText(resourceController.getMainResourceBundle().getString("Неправильный формат возраста дома!"));
            return null;
        }

        Integer houseNumberOfFlatsOnFloor;

        try {
            houseNumberOfFlatsOnFloor = Integer.parseInt(houseNumberOfFlatsOnFloorField.getText().trim());
            if (houseNumberOfFlatsOnFloor < 0) {
                messageLabel.setText(resourceController.getMainResourceBundle().getString("Неправильный формат количества квартир на этаже!"));
                return null;
            }
        } catch (NumberFormatException e) {
            messageLabel.setText(resourceController.getMainResourceBundle().getString("Неправильный формат количества квартир на этаже!"));
            return null;
        }

        aboutHouse = houseName + "; " + houseYear + "; " + houseNumberOfFlatsOnFloor;

        if (name != null && x != null && x <= 235 && area > 0 && area < 700 && numberOfRooms > 0 && furnish != null && view != null && transport != null && houseName != null && houseYear > 0 && houseNumberOfFlatsOnFloor > 0) {
            Flat flat = new Flat(login, id, name, new Coordinates(x, y), creationDate, area, numberOfRooms, furnish, view, transport, new House(houseName, houseYear, houseNumberOfFlatsOnFloor));
            return flat;
        } else {
            messageLabel.setText(resourceController.getMainResourceBundle().getString("Данные введены неверно!"));
        }
        return null;
    }
}
