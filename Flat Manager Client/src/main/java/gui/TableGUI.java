package gui;

import client.ConnectionStatus;
import client.RequestSender;
import client.UserAction;
import lab.Flat;
import resources.ResourceController;
import tools.Message;
import tools.Request;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.format.DateTimeFormatter;
import java.util.regex.PatternSyntaxException;

public class TableGUI {
    private JTable table;
    private JPanel mainPanel;
    private JButton backButton;
    private JPanel tablePanel;
    private JPanel messagePanel;
    private JPanel backButtonPanel;
    private JLabel messageLabel;
    private JTextField selectionDataField;
    private JComboBox comboBox;
    private JPanel filterButtonPanel;
    private JButton filterButton;
    private JButton deleteButton;
    private JButton changeButton;
    private JPanel userPanel;
    private JLabel userNameLabel;
    private JComboBox languageComboBox;
    private JButton refreshButton;

    private String[][] data;
    private String[] columns = {"userName", "id", "name", "coordinate x", "coordinate y",
            "creationDate", "area", "numberOfRooms", "furnish", "view", "transport",
            "houseName", "houseYear", "houseNumberOfFlatsOnFloor"};
    private String[] languages = {"Russian", "Portuguese", "Albanian", "English (Canada)"};

    private RequestSender requestSender;
    private String login;
    private String password;
    private boolean isRegistered;
    private boolean flag1 = true;
    private boolean flag2 = true;
    private boolean flag3 = true;
    private Flat[] flatCollection;
    private ResourceController resourceController;

    public TableGUI(RequestSender requestSender, String login, String password, boolean isRegistered, ResourceController resourceController) {
        this.requestSender = requestSender;
        this.login = login;
        this.password = password;
        this.isRegistered = isRegistered;
        this.resourceController = resourceController;
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setBackground(new Color(-13025985));
        mainPanel.setPreferredSize(new Dimension(700, 450));
        messagePanel.setLayout(new GridBagLayout());
        messagePanel.setBackground(new Color(-13025985));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10, 0, 0, 0);
        mainPanel.add(messagePanel, gbc);
        Font messageLabelFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 20, messageLabel.getFont());
        if (messageLabelFont != null) messageLabel.setFont(messageLabelFont);
        messageLabel.setForeground(new Color(-1));
        messageLabel.setHorizontalAlignment(0);
        messageLabel.setHorizontalTextPosition(0);
        messageLabel.setText("Таблица элементов коллекции:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        messagePanel.add(messageLabel, gbc);
        tablePanel.setLayout(new GridBagLayout());
        tablePanel.setPreferredSize(new Dimension(700, 200));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(tablePanel, gbc);
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setPreferredSize(new Dimension(700, 200));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        tablePanel.add(scrollPane1, gbc);
        table.setAutoCreateRowSorter(true);
        table.setBackground(new Color(-13025985));
        Font tableFont = this.$$$getFont$$$(null, -1, -1, table.getFont());
        if (tableFont != null) table.setFont(tableFont);
        table.setForeground(new Color(-1));
        table.setIntercellSpacing(new Dimension(1, 1));
        table.setPreferredSize(new Dimension(700, 900));
        table.setShowVerticalLines(true);
        scrollPane1.setViewportView(table);
        backButtonPanel = new JPanel();
        backButtonPanel.setLayout(new GridBagLayout());
        backButtonPanel.setBackground(new Color(-13025985));
        backButtonPanel.setPreferredSize(new Dimension(400, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10, 0, 0, 0);
        mainPanel.add(backButtonPanel, gbc);
        deleteButton.setActionCommand("");
        deleteButton.setAlignmentX(0.5f);
        deleteButton.setAlignmentY(0.5f);
        deleteButton.setAutoscrolls(false);
        deleteButton.setBackground(new Color(-13025985));
        deleteButton.setBorderPainted(true);
        deleteButton.setFocusPainted(false);
        Font deleteButtonFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 18, deleteButton.getFont());
        if (deleteButtonFont != null) deleteButton.setFont(deleteButtonFont);
        deleteButton.setForeground(new Color(-1));
        deleteButton.setPreferredSize(new Dimension(180, 30));
        deleteButton.setText("Удалить");
        deleteButton.putClientProperty("hideActionText", Boolean.FALSE);
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 10, 0, 0);
        backButtonPanel.add(deleteButton, gbc);
        changeButton.setActionCommand("");
        changeButton.setAlignmentX(0.5f);
        changeButton.setAlignmentY(0.5f);
        changeButton.setAutoscrolls(false);
        changeButton.setBackground(new Color(-13025985));
        changeButton.setBorderPainted(true);
        changeButton.setFocusPainted(false);
        Font changeButtonFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 18, changeButton.getFont());
        if (changeButtonFont != null) changeButton.setFont(changeButtonFont);
        changeButton.setForeground(new Color(-1));
        changeButton.setPreferredSize(new Dimension(180, 30));
        changeButton.setText("Изменить");
        changeButton.putClientProperty("hideActionText", Boolean.FALSE);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 0, 10);
        backButtonPanel.add(changeButton, gbc);
        refreshButton.setActionCommand("");
        refreshButton.setAlignmentX(0.5f);
        refreshButton.setAlignmentY(0.5f);
        refreshButton.setAutoscrolls(false);
        refreshButton.setBackground(new Color(-13025985));
        refreshButton.setBorderPainted(true);
        refreshButton.setFocusPainted(false);
        Font refreshButtonFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 18, refreshButton.getFont());
        if (refreshButtonFont != null) refreshButton.setFont(refreshButtonFont);
        refreshButton.setForeground(new Color(-1));
        refreshButton.setPreferredSize(new Dimension(180, 30));
        refreshButton.setText("Обновить");
        refreshButton.putClientProperty("hideActionText", Boolean.FALSE);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        backButtonPanel.add(refreshButton, gbc);
        filterButtonPanel = new JPanel();
        filterButtonPanel.setLayout(new GridBagLayout());
        filterButtonPanel.setBackground(new Color(-13025985));
        filterButtonPanel.setPreferredSize(new Dimension(400, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(10, 0, 0, 0);
        mainPanel.add(filterButtonPanel, gbc);
        filterButton.setActionCommand("");
        filterButton.setAlignmentX(0.5f);
        filterButton.setAlignmentY(0.5f);
        filterButton.setAutoscrolls(false);
        filterButton.setBackground(new Color(-13025985));
        filterButton.setBorderPainted(true);
        filterButton.setFocusPainted(false);
        Font filterButtonFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 18, filterButton.getFont());
        if (filterButtonFont != null) filterButton.setFont(filterButtonFont);
        filterButton.setForeground(new Color(-1));
        filterButton.setPreferredSize(new Dimension(180, 30));
        filterButton.setText("Фильтр");
        filterButton.putClientProperty("hideActionText", Boolean.FALSE);
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 10, 0, 0);
        filterButtonPanel.add(filterButton, gbc);
        selectionDataField = new JTextField();
        selectionDataField.setBackground(new Color(-13025985));
        selectionDataField.setCaretColor(new Color(-1));
        selectionDataField.setDisabledTextColor(new Color(-1));
        selectionDataField.setForeground(new Color(-1));
        selectionDataField.setPreferredSize(new Dimension(180, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        filterButtonPanel.add(selectionDataField, gbc);
        comboBox.setBackground(new Color(-13025985));
        comboBox.setForeground(new Color(-1));
        comboBox.setPreferredSize(new Dimension(180, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 0, 0, 10);
        filterButtonPanel.add(comboBox, gbc);
        userPanel = new JPanel();
        userPanel.setLayout(new GridBagLayout());
        userPanel.setAutoscrolls(false);
        userPanel.setBackground(new Color(-13025985));
        userPanel.setMinimumSize(new Dimension(537, 55));
        userPanel.setPreferredSize(new Dimension(700, 55));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(20, 0, 0, 0);
        mainPanel.add(userPanel, gbc);
        userNameLabel = new JLabel();
        userNameLabel.setDoubleBuffered(false);
        userNameLabel.setEnabled(true);
        Font userNameLabelFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 24, userNameLabel.getFont());
        if (userNameLabelFont != null) userNameLabel.setFont(userNameLabelFont);
        userNameLabel.setForeground(new Color(-1));
        userNameLabel.setHorizontalAlignment(4);
        userNameLabel.setHorizontalTextPosition(0);
        userNameLabel.setMaximumSize(new Dimension(537, 28));
        userNameLabel.setMinimumSize(new Dimension(537, 55));
        userNameLabel.setPreferredSize(new Dimension(300, 55));
        userNameLabel.setRequestFocusEnabled(true);
        userNameLabel.setText("Name");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        userPanel.add(userNameLabel, gbc);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setBackground(new Color(-13025985));
        panel1.setPreferredSize(new Dimension(300, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        userPanel.add(panel1, gbc);
        languageComboBox.setBackground(new Color(-13025985));
        languageComboBox.setForeground(new Color(-1));
        languageComboBox.setOpaque(true);
        languageComboBox.setPreferredSize(new Dimension(150, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(0, 0, 0, 150);
        panel1.add(languageComboBox, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        panel2.setBackground(new Color(-13025985));
        panel2.setPreferredSize(new Dimension(400, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(6, 0, 0, 0);
        mainPanel.add(panel2, gbc);
        backButton.setActionCommand("");
        backButton.setAlignmentX(0.5f);
        backButton.setAlignmentY(0.5f);
        backButton.setAutoscrolls(false);
        backButton.setBackground(new Color(-13025985));
        backButton.setBorderPainted(true);
        backButton.setFocusPainted(false);
        Font backButtonFont = this.$$$getFont$$$("Franklin Gothic Demi", Font.PLAIN, 18, backButton.getFont());
        if (backButtonFont != null) backButton.setFont(backButtonFont);
        backButton.setForeground(new Color(-1));
        backButton.setPreferredSize(new Dimension(180, 30));
        backButton.setText("Назад");
        backButton.putClientProperty("hideActionText", Boolean.FALSE);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(backButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    public void setUserName() {
        userNameLabel.setText(login);
    }

    public void drawMessages() {
        messageLabel.setText(resourceController.getMainResourceBundle().getString("Таблица элементов коллекции:"));
        filterButton.setText(resourceController.getMainResourceBundle().getString("Фильтр"));
        changeButton.setText(resourceController.getMainResourceBundle().getString("Изменить"));
        refreshButton.setText(resourceController.getMainResourceBundle().getString("Обновить"));
        deleteButton.setText(resourceController.getMainResourceBundle().getString("Удалить"));
        backButton.setText(resourceController.getMainResourceBundle().getString("Назад"));
    }

    private void createUIComponents() {
        messagePanel = new JPanel();
        tablePanel = new JPanel();
        messageLabel = new JLabel();
        table = new JTable();
        backButton = new JButton();
        comboBox = new JComboBox(columns);
        filterButton = new JButton();
        deleteButton = new JButton();
        changeButton = new JButton();
        refreshButton = new JButton();

        languageComboBox = new JComboBox(languages);
        languageComboBox.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resourceController.setMainResourceBundleByIndex(languageComboBox.getSelectedIndex());
                drawMessages();
            }
        });
        languageComboBox.setSelectedIndex(resourceController.getSelectedLanguage());
        startRequest();

        refreshButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                messagePanel.setVisible(false);
                tablePanel.setVisible(false);
                backButtonPanel.setVisible(false);
                mainPanel.removeAll();
                TableGUI tableGUI = new TableGUI(requestSender, login, password, isRegistered, resourceController);
                tableGUI.drawMessages();
                tableGUI.setUserName();
                mainPanel.add(tableGUI.$$$getRootComponent$$$());
            }
        });

        deleteButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String message;
                int selectedRowIndex = table.getSelectedRow();
                Integer selectedId = null;
                try {
                    selectedId = Integer.parseInt((String) table.getValueAt(selectedRowIndex, 1));
                } catch (IndexOutOfBoundsException e1) {
                    messageLabel.setText(resourceController.getMainResourceBundle().getString("Выберите строку!"));
                }
                for (Flat flat : flatCollection) {
                    if (flat.getId().equals(selectedId)) {
                        message = UserAction.consoleMoves("remove " + selectedId, requestSender, login, password, isRegistered, resourceController);
                        if (message != null) {
                            ((DefaultTableModel) table.getModel()).removeRow(selectedRowIndex);
                        }
                        if (!ConnectionStatus.isConnected()) {
                            if (requestSender.setConnection()) {
                                message = UserAction.consoleMoves("remove " + selectedId, requestSender, login, password, isRegistered, resourceController);
                                ((DefaultTableModel) table.getModel()).removeRow(selectedRowIndex);
                            } else {
                                messageLabel.setText(resourceController.getMainResourceBundle().getString("Ошибка соединения с сервером!"));
                            }
                        }
                        messageLabel.setText(message);
                    }
                }
            }
        });

        changeButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRowIndex = table.getSelectedRow();
                Integer selectedId = null;
                try {
                    selectedId = Integer.parseInt((String) table.getValueAt(selectedRowIndex, 1));
                } catch (IndexOutOfBoundsException e1) {
                    messageLabel.setText(resourceController.getMainResourceBundle().getString("Выберите строку!"));
                }
                for (Flat flat : flatCollection) {
                    if (flat.getId().equals(selectedId)) {
                        messagePanel.setVisible(false);
                        tablePanel.setVisible(false);
                        backButtonPanel.setVisible(false);
                        mainPanel.removeAll();
                        AskFlatGUI askFlatGUI = new AskFlatGUI(requestSender, login, password, isRegistered, false, flat.getId(), 1, resourceController);
                        askFlatGUI.drawMessages();
                        askFlatGUI.setFlat(flat);
                        mainPanel.add(askFlatGUI.$$$getRootComponent$$$());
                    }
                }
            }
        });

        filterButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedItem = comboBox.getSelectedIndex();
                String selectionData = selectionDataField.getText();
                TableRowSorter<TableModel> sorter = new TableRowSorter<>(table.getModel());
                table.setRowSorter(sorter);
                RowFilter<TableModel, Object> rowFilter;
                try {
                    rowFilter = RowFilter.regexFilter(selectionData, selectedItem);
                } catch (PatternSyntaxException e1) {
                    return;
                }
                sorter.setRowFilter(rowFilter);
            }
        });

        backButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                messagePanel.setVisible(false);
                tablePanel.setVisible(false);
                backButtonPanel.setVisible(false);
                mainPanel.removeAll();
                MainGUI mainGUI = new MainGUI(requestSender, login, password, isRegistered, resourceController);
                mainGUI.drawMessages();
                mainGUI.setUserName();
                mainPanel.add(mainGUI.$$$getRootComponent$$$());
            }
        });
    }

    private Timer timer1;
    private Timer timer2;
    private Timer timer3;

    public void startRequest() {
        Request request = new Request("table", resourceController.getMainResourceBundle().getBaseBundleName());
        request.setLogin(login);
        request.setPassword(password);
        request.setRegistered(isRegistered);
        if (requestSender.sendRequest(request)) {
            Message message = requestSender.getAnswer();
            if (message != null) {
                ConnectionStatus.setConnectionStatus(true);
                getTable(message);
            }
        } else {
            ConnectionStatus.setConnectionStatus(false);
            tablePanel.setVisible(false);
            timer1 = new Timer(10, new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    messageLabel.setText(resourceController.getMainResourceBundle().getString("Соединение с сервером разорвано!"));
                    timer1.stop();
                }
            });
            timer1.start();
        }
        if (!ConnectionStatus.isConnected()) {
            if (requestSender.setConnection()) {
                ConnectionStatus.setConnectionStatus(true);
                tablePanel.setVisible(true);
                requestSender.sendRequest(request);
                Message message = requestSender.getAnswer();
                if (message != null) {
                    timer3 = new Timer(100, new AbstractAction() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            messageLabel.setText(resourceController.getMainResourceBundle().getString("Соединение с сервером восстановлено!"));
                            timer3.stop();
                        }
                    });
                    timer3.start();
                    getTable(message);
                }
            } else {
                timer2 = new Timer(1000, new AbstractAction() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        messageLabel.setText(resourceController.getMainResourceBundle().getString("Ошибка соединения с сервером!"));
                        timer2.stop();
                    }
                });
                timer2.start();
            }
        }
    }

    private void getTable(Message message) {
        flatCollection = message.getFlatCollection();
        data = new String[flatCollection.length][14];
        for (int i = 0; i < flatCollection.length; i++) {
            data[i][0] = flatCollection[i].getUserName();
            data[i][1] = String.valueOf(flatCollection[i].getId());
            data[i][2] = flatCollection[i].getName();
            data[i][3] = flatCollection[i].getCoordinates().split(";")[0].trim();
            data[i][4] = flatCollection[i].getCoordinates().split(";")[1].trim();
            data[i][5] = flatCollection[i].getCreationDate().format(DateTimeFormatter.ofPattern("MM/dd/yyyy - HH:mm"));
            data[i][6] = String.valueOf(flatCollection[i].getArea());
            data[i][7] = String.valueOf(flatCollection[i].getNumberOfRooms());
            data[i][8] = flatCollection[i].getFurnish();
            data[i][9] = flatCollection[i].getView();
            data[i][10] = flatCollection[i].getTransport();
            data[i][11] = flatCollection[i].getHouse().split(";")[0].trim();
            data[i][12] = flatCollection[i].getHouse().split(";")[1].trim();
            data[i][13] = flatCollection[i].getHouse().split(";")[2].trim();
        }
        TableModel tableModel = new DefaultTableModel(data, columns);
        table = new JTable(tableModel);
    }
}
